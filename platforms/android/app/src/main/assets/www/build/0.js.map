{"version":3,"sources":["../../src/pages/same-component/emails/emails.module.ts","../../src/shared/side-menu-content/models/side-menu-option-select-condition.ts","../../src/pages/same-component/emails/emails.ts","../../src/shared/side-menu-content/custom-decorators/side-menu-display-text-conditions.decorator.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["// Angular\nimport { NgModule } from '@angular/core';\n\n// Ionic\nimport { IonicPageModule } from 'ionic-angular';\n\n// Pages\nimport { EmailsPage } from './emails';\n\n@NgModule({\n    declarations: [EmailsPage],\n    imports: [IonicPageModule.forChild(EmailsPage)],\n    exports: [EmailsPage]\n})\nexport class EmailsPageModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/pages/same-component/emails/emails.module.ts","// ---------------------------------------------------\n// This enum is used when the same component\n// (page) is used in more than one option from the\n// side menu. So instead of using our custom decorator\n// passing the displayText of an option, we would need\n// to give the decorator some information about how it\n// should check which option from the side menu should\n// be marked as selected based on a property from \n// the component\n// ---------------------------------------------------\n\nexport enum Matcher {\n    ToBe, // Expects the current value to be == to the expected value.\n    NotToBe, // Expects the current value to be != to the expected value.\n    ToEqual, // Expects the current value to be === to the expected value.\n    NotToEqual, // Expects the current value to be !== to the expected value.\n    ToBeDefined, // Expects the current value to be defined (not undefined)\n    ToBeFalsy, //  Expects the current value to be falsy\n    ToBeGreaterThan, // Expects the current value to be greater than the expected value.\n    ToBeGreaterThanOrEqual, // Expects the current value to be greater than or equal to the expected value.\n    ToBeLessThan, // Expects the current value to be less than the expected value.\n    ToBeLessThanOrEqual, // Expects the current value to be less than or equal to the expected value.\n    ToBeNull, // Expects the current value to be null.\n    ToBeTruthy, // Expects the current value to be truthy.\n    ToBeUndefined, // Expects the current value to be undefined.\n    ToContain, // Expects the current value to contain a specific value.\n    ToMatch // Expects the current value to match a regular expression\n}\n\n// SideMenuOptionSelectCondition interface\nexport interface SideMenuOptionSelectCondition {\n\n    // The name of a property from the component to\n    // check its value against the value\n    propertyName: string;\n\n    // The value that the property with name propertyName \n    // should have mark this option as selected\n    value?: any;\n\n    // Defines how should the value from propertyName\n    // to be checked to figure out if the condition is satisfied\n    matcher: Matcher;\n\n    // The displayText of the option from the side menu \n    // that should be marked as selected if the condition is satisfied\n    displayText: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/side-menu-content/models/side-menu-option-select-condition.ts","// Angular\nimport { Component } from '@angular/core';\n\n// Ionic\nimport { IonicPage, NavParams } from 'ionic-angular';\n\n// Side Menu Component\nimport { Matcher } from '../../../shared/side-menu-content/models/side-menu-option-select-condition';\nimport { SideMenuDisplayTextConditions } from '../../../shared/side-menu-content/custom-decorators/side-menu-display-text-conditions.decorator';\n\n@IonicPage({\n    segment: 'emails/:showDeleted'\n})\n@Component({\n    selector: 'page-emails',\n    templateUrl: 'emails.html'\n})\n@SideMenuDisplayTextConditions([\n    { propertyName: 'showDeleted', matcher: Matcher.ToBeFalsy, displayText: 'Inbox' },\n    { propertyName: 'showDeleted', matcher: Matcher.ToBeTruthy, displayText: 'Bin' }\n])\nexport class EmailsPage {\n\n    public showDeleted: boolean;\n\n    constructor(private navParams: NavParams) { }\n\n    ionViewWillEnter() {\n        // We initialize the showDeleted property so it can be ready\n        // to be used in the SideMenuDisplayTextConditions decorator\n        this.showDeleted = this.toBoolean(this.navParams.get('showDeleted'));\n    }\n\n    // Method that converts the parameter to boolean if needed\n    private toBoolean(value: any): boolean {\n        if (typeof value === 'boolean') return value;\n        return value === 'false' ? false : true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/same-component/emails/emails.ts","// Angular\nimport { AppModule } from \"../../../app/app.module\";\n\n// Ionic\nimport { Events } from \"ionic-angular\";\n\n// SideMenuContentComponent\nimport { SideMenuOptionSelectCondition, Matcher } from \"../models/side-menu-option-select-condition\";\nimport { SideMenuOptionSelect, SideMenuOptionSelectData } from \"../models/side-menu-option-select-event\";\n\nexport function SideMenuDisplayTextConditions(conditions: Array<SideMenuOptionSelectCondition>) {\n\n    // Method that uses our events to tell the SideMenuContentComponent that\n    // an option with the name sent should be marked as selected\n    function selectOption(name: string): void {\n\n        // Get an instance of the Events service\n        const eventsCtrl = AppModule.injector.get(Events);\n\n        // Prepare the data that the SideMenuContentComponent expects\n        const redirectData: SideMenuOptionSelectData = { displayText: name };\n\n        // Send the event with the data\n        eventsCtrl.publish(SideMenuOptionSelect, redirectData);\n    }\n\n    // Method that returns true if the condition is satisfied\n    function conditionIsMet(self: any, condition: SideMenuOptionSelectCondition): boolean {\n        switch (condition.matcher) {\n            case Matcher.ToBe:\n                return self[condition.propertyName] == condition.value;\n            case Matcher.NotToBe:\n                return self[condition.propertyName] != condition.value;\n            case Matcher.ToEqual:\n                return self[condition.propertyName] === condition.value;\n            case Matcher.NotToEqual:\n                return self[condition.propertyName] !== condition.value;\n            case Matcher.ToBeDefined:\n                return self[condition.propertyName] !== undefined;\n            case Matcher.ToBeUndefined:\n                return self[condition.propertyName] === undefined;\n            case Matcher.ToBeFalsy:\n                return !!!self[condition.propertyName];\n            case Matcher.ToBeTruthy:\n                return !!self[condition.propertyName];\n            case Matcher.ToBeGreaterThan:\n                return self[condition.propertyName] > condition.value;\n            case Matcher.ToBeGreaterThanOrEqual:\n                return self[condition.propertyName] >= condition.value;\n            case Matcher.ToBeLessThan:\n                return self[condition.propertyName] < condition.value;\n            case Matcher.ToBeLessThanOrEqual:\n                return self[condition.propertyName] <= condition.value;\n            case Matcher.ToBeNull:\n                return self[condition.propertyName] === null;\n            case Matcher.ToContain:\n                return (<Array<any>>self[condition.propertyName]).indexOf(condition.value) > -1;\n            case Matcher.ToMatch:\n                const regexp = new RegExp(condition.value);\n                return regexp.test(self[condition.propertyName])\n        }\n    }\n\n    // Method that returns the name of the option whose condition is satisfied\n    function checkConditions(self: any, conditions: Array<SideMenuOptionSelectCondition>): string {\n        let result = null;\n        for (let i = 0; i < conditions.length; i++) {\n            if (conditionIsMet(self, conditions[i])) {\n                result = conditions[i].displayText;\n                break;\n            }\n        }\n        return result;\n    }\n\n    return function (constructor) {\n        const originalDidEnter = constructor.prototype.ionViewDidEnter;\n\n        constructor.prototype.ionViewDidEnter = function () {\n\n            // Call the ionViewDidEnter event defined in the page\n            originalDidEnter && typeof originalDidEnter === 'function' && originalDidEnter.apply(this, arguments);\n\n            if (AppModule && AppModule.injector) {\n                if (conditions && conditions.length) {\n                    // Check if there's at least one option that satisfies its conditions\n                    const optionNameToBeSelected = checkConditions(this, conditions);\n\n                    // If we could find one condition that is satisfied, tell\n                    // the SideMenuContentComponent to select that option\n                    if (optionNameToBeSelected) {\n                        selectOption(optionNameToBeSelected)\n                    } else {\n                        console.warn(`[SideMenuDisplayTextConditions]: No condition could be met.`);\n                    }\n                } else {\n                    console.error('[SideMenuDisplayTextConditions]: You must provide an array of SideMenuOptionSelectCondition entities in order to use this decorator.');\n                }\n            } else {\n                console.error('[SideMenuDisplayTextConditions]: You must make the injector to be available in the AppModule to use this decorator. Please take a look at [DOCS URL] for more information.');\n            }\n        }\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/shared/side-menu-content/custom-decorators/side-menu-display-text-conditions.decorator.ts"],"sourceRoot":""}